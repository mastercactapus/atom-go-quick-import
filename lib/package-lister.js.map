{"version":3,"sources":["../src/package-lister.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAMA,SAAS,GAAG,CAAC,OAAe,eAAE,OAAgB,yCAAmB;AAC/D,SAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAC,MAAM,EAAG;AACnC,uBANK,IAAI,EAMJ,OAAO,EAAE,OAAO,EAAE,UAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAG;AACtC,UAAI,GAAG,EAAE,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;AAC7B,aAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;KAC1B,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;AAED,SAAS,QAAQ,CAAC,IAAY,4CAA0B;AACtD,MAAI,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACpC,MAAI,MAAM,GAAG,EAAE,CAAC;AAChB,OAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAE;AAClB,QAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3B,UAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;GACvD,CAAC,CAAC;AACH,SAAO,MAAM,CAAC;CACf;;;sDAED;QACM,GAAG;;;;;;mBAAkB,GAAG,CAAC,QAAQ,CAAC;;;;AAAlC,eAAG,GAAG,QAAQ;6CACX,CACL,eAAK,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAE,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,EACvG,eAAK,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAE,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CACxG;;;;;;;;GACF;;kBANc,OAAO;;;;;;sDAQP;QACT,IAAI,EACJ,IAAI,EACJ,IAAmC,sCAU9B,CAAC;;;;;AAZN,gBAAI,GAAG,EAAE;;mBACI,OAAO,EAAE;;;AAAtB,gBAAI;AACJ,gBAAmC,GAAG,IAAI,CAAC,GAAG,CAAC,UAAA,GAAG,EAAE;AACtD,qBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAC,MAAM,EAAG;AACnC,oCAAK,eAAK,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE,UAAC,GAAG,EAAE,KAAK,sBAAkB;AAC1D,sBAAI,GAAG,EAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;AAC5B,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,EAAE;AACnB,2BAAO,eAAK,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;mBAClD,CAAC,CAAC,CAAC;iBACL,CAAC,CAAC;eACJ,CAAC,CAAA;aACH,CAAC;AACO,aAAC,GAAC,CAAC;;;kBAAC,CAAC,GAAC,IAAI,CAAC,MAAM,CAAA;;;;;2BACjB,IAAI;;mBAAc,IAAI,CAAC,CAAC,CAAC;;;;AAAhC,gBAAI,gBAAQ,MAAM;;;AADO,aAAC,EAAE;;;;;8CAGvB,IAAI;;;;;;;;GACZ;;kBAjB6B,QAAQ","file":"package-lister.js","sourcesContent":["/*@flow*/\nimport \"babel-polyfill\";\nimport { exec } from \"child_process\";\nimport path from \"path\";\nimport glob from \"glob\";\n\nfunction run(command: string, options?: Object): Promise<string> {\n  return new Promise((resolve,reject)=>{\n    exec(command, options, (err,sout,serr)=>{\n      if (err) return reject(serr);\n      resolve(sout.toString());\n    });\n  });\n}\n\nfunction parseEnv(data: string): {[key:string]: string} {\n  var parts = data.trim().split(\"\\n\");\n  var result = {};\n  parts.forEach(part=>{\n    var keys = part.split(\"=\");\n    result[keys[0]] = JSON.parse(keys.slice(1).join(\"=\"));\n  });\n  return result;\n}\n\nasync function pkgDirs(): Promise<Array<string>> {\n  var env = parseEnv(await run(\"go env\"));\n  return [\n    path.resolve(atom.config.get(\"go-quick-import.GOROOT\")||env.GOROOT, \"pkg\", env.GOOS + \"_\" + env.GOARCH),\n    path.resolve(atom.config.get(\"go-quick-import.GOPATH\")||env.GOPATH, \"pkg\", env.GOOS + \"_\" + env.GOARCH),\n  ]\n}\n\nexport default async function listPkgs(): Promise<Array<string>> {\n  var pkgs = [];\n  var dirs = await pkgDirs();\n  var wait: Array<Promise<Array<string>>> = dirs.map(dir=>{\n    return new Promise((resolve,reject)=>{\n      glob(path.join(dir, \"**/*.a\"), (err, paths: Array<string>)=>{\n        if (err) return reject(err);\n        resolve(paths.map(p=>{\n          return path.relative(dir, p.replace(/\\.a$/, \"\"));\n        }));\n      });\n    })\n  });\n  for (var i=0;i<wait.length;i++){\n    pkgs = pkgs.concat(await wait[i]);\n  }\n  return pkgs;\n}\n"]}