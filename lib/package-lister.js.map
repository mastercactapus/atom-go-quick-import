{"version":3,"sources":["../src/package-lister.js"],"names":["parseEnv","run","env","resolve","atom","config","get","GOROOT","GOOS","GOARCH","GOPATH","split","delimiter","map","p","pkgDirs","Promise","reject","err","res","aGlob","command","options","sout","serr","toString","data","parts","trim","result","forEach","keys","part","JSON","parse","slice","join","validPackage","includes","sep","startsWith","some","key","endsWith","pkgs","dirs","all","d","then","paths","relative","replace","acc","concat","reduce","filter","listPkgs"],"mappings":"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","file":"package-lister.js","sourcesContent":["/*@flow*/\nimport \"babel-polyfill\";\nimport { exec } from \"child_process\";\nimport path from \"path\";\nimport glob from \"glob\";\n\nfunction run(command: string, options?: Object): Promise<string> {\n  return new Promise((resolve,reject)=>{\n    exec(command, options, (err,sout,serr)=>{\n      if (err) return reject(serr);\n      resolve(sout.toString());\n    });\n  });\n}\n\nfunction parseEnv(data: string): {[key:string]: string} {\n  var parts = data.trim().split(\"\\n\");\n  var result = {};\n  parts.forEach(part=>{\n    var keys = part.split(\"=\");\n    result[keys[0]] = JSON.parse(keys.slice(1).join(\"=\"));\n  });\n  return result;\n}\n\nasync function pkgDirs(): Promise<Array<string>> {\n  var env = parseEnv(await run(\"go env\"));\n  return [\n    path.resolve(atom.config.get(\"go-quick-import.GOROOT\")||env.GOROOT, \"pkg\", env.GOOS + \"_\" + env.GOARCH),\n    ...(atom.config.get(\"go-quick-import.GOPATH\")||env.GOPATH).split(path.delimiter).map(p=>\n      path.resolve(p, \"pkg\", env.GOOS + \"_\" + env.GOARCH)\n    ),\n  ]\n}\n\nasync function aGlob(p: string): Array<string> {\n  return new Promise((resolve, reject)=>glob(p, (err,res)=>err&&reject(err)||resolve(res)));\n}\n\nfunction validPackage(p: string): boolean {\n  if (p.includes(path.sep+\"_\") || p.startsWith(\"_\")) return false;\n  \n  return ![\"vendor\", \"internal\"].some(key=>\n    p.includes(path.sep+key+path.sep) || p.startsWith(key+path.sep) || p.endsWith(p.sep+key)\n  )\n}\n\nexport default async function listPkgs(): Promise<Array<string>> {\n  var pkgs = [];\n  var dirs = await pkgDirs();\n  var pkgs = (await Promise.all(\n    dirs.map(d=>\n      aGlob(path.join(d, \"**/*.a\")).then(paths=>paths.map(p=>path.relative(d, p.replace(/\\.a$/, \"\"))))\n    )\n  )).reduce((acc,p)=>acc.concat(p), []);\n\n  return pkgs.filter(validPackage);\n}\n"]}