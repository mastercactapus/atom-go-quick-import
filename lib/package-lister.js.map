{"version":3,"sources":["../src/package-lister.js"],"names":[],"mappings":";;;;;;;;;;;;IAGqB,aAAa;AAChC,WADmB,aAAa,GAClB;0BADK,aAAa;;AAE9B,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,QAAI,CAAC,IAAI,GAAG,IAAI,CAAC;GAClB;;eAJkB,aAAa;;+BAQG;;;AACjC,UAAI,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC,IAAI,CAAC;AAChC,UAAI,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAC,MAAM,EAAG;AACxC,cAAK,IAAI,EAAE,CAAC;AACZ,YAAI,MAAM,GAAG,EAAE,CAAC;AAChB,YAAI,IAAI,GAAG,mBAfR,KAAK,EAeS,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,+CAA+C,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAC,CAAC,CAAC;AAC5I,cAAK,IAAI,GAAG,IAAI,CAAC;AACjB,YAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI;iBAAE,MAAM,IAAE,IAAI;SAAA,CAAC,CAAC;AAC3C,YAAI,CAAC,EAAE,CAAC,OAAO,EAAE,UAAA,IAAI,EAAE;AACrB,gBAAK,IAAI,GAAG,IAAI,CAAC;AACjB,cAAI,IAAI,KAAK,CAAC,EAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC,CAAC;AACnF,iBAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;mBAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;WAAA,CAAC,CAAC,CAAC;SAC9D,CAAC,CAAC;OACJ,CAAC,CAAC;AACH,aAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;8BAEiC;AAChC,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACjB,aAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;KACxB;;;2BAEM;AACL,UAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO;AACvB,UAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;AACjB,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC;KAClB;;;SAlCkB,aAAa;;;kBAAb,aAAa","file":"package-lister.js","sourcesContent":["/*@flow*/\nimport { spawn } from \"child_process\";\n\nexport default class PackageLister {\n  constructor() {\n    this.proc = null;\n    this.list = null;\n  }\n  list: ?Promise;\n  proc: ?Object;\n\n  packages(): Promise<Array<Import>> {\n    if (this.list) return this.list;\n    this.list = new Promise((resolve,reject)=>{\n      this.kill();\n      var buffer = \"\";\n      var proc = spawn(\"go\", [\"list\", \"-f\", '{\"Path\":\"{{.ImportPath}}\",\"Name\":\"{{.Name}}\"}', \"-e\", \"...\"], {stdio: [\"ignore\", \"pipe\", \"ignore\"]});\n      this.proc = proc;\n      proc.stdout.on(\"data\", data=>buffer+=data);\n      proc.on(\"close\", code=>{\n        this.proc = null;\n        if (code !== 0) return reject(new Error(\"go list exited with non-zero exit code\"));\n        resolve(buffer.trim().split(\"\\n\").map(str=>JSON.parse(str)));\n      });\n    });\n    return this.list;\n  }\n\n  refresh(): Promise<Array<Import>> {\n    this.list = null;\n    return this.packages();\n  }\n\n  kill() {\n    if (!this.proc) return;\n    this.proc.kill();\n    this.proc = null;\n  }\n}\n"]}