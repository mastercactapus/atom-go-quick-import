{"version":3,"sources":["../src/package-lister.js"],"names":[],"mappings":";;;;;;;sDAyBA,kB,6BAAA;AAAA,QACM,GADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2B,IAAI,QAAJ,CAD3B;;AAAA;AAAA;AACM,eADN,GACY,QADZ;AAAA,6CAES,CACL,eAAK,OAAL,CAAa,KAAK,MAAL,CAAY,GAAZ,CAAgB,wBAAhB,KAA2C,IAAI,MAA5D,EAAoE,KAApE,EAA2E,IAAI,IAAJ,GAAW,GAAX,GAAiB,IAAI,MAAhG,CADK,EAEL,eAAK,OAAL,CAAa,KAAK,MAAL,CAAY,GAAZ,CAAgB,wBAAhB,KAA2C,IAAI,MAA5D,EAAoE,KAApE,EAA2E,IAAI,IAAJ,GAAW,GAAX,GAAiB,IAAI,MAAhG,CAFK,CAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,O;;;;;AAxBf;;AACA;;AACA;;;;AACA;;;;;;;;;AAEA,SAAS,GAAT,CAAa,O,aAAb,EAA8B,O,iBAA9B,C,sBAAA,CAAiE;AAC/D,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAS,MAAT,EAAkB;AACnC,6BAAK,OAAL,EAAc,OAAd,EAAuB,UAAC,GAAD,EAAK,IAAL,EAAU,IAAV,EAAiB;AACtC,UAAI,GAAJ,EAAS,OAAO,OAAO,IAAP,CAAP;AACT,cAAQ,KAAK,QAAL,EAAR;AACD,KAHD;AAID,GALM,CAAP;AAMD;;AAED,SAAS,QAAT,CAAkB,I,aAAlB,C,6BAAA,CAAwD;AACtD,MAAI,QAAQ,KAAK,IAAL,GAAY,KAAZ,CAAkB,IAAlB,CAAZ;AACA,MAAI,SAAS,EAAb;AACA,QAAM,OAAN,CAAc,gBAAM;AAClB,QAAI,OAAO,KAAK,KAAL,CAAW,GAAX,CAAX;AACA,WAAO,KAAK,CAAL,CAAP,IAAkB,KAAK,KAAL,CAAW,KAAK,KAAL,CAAW,CAAX,EAAc,IAAd,CAAmB,GAAnB,CAAX,CAAlB;AACD,GAHD;AAIA,SAAO,MAAP;AACD;;;sDAUc,mB,6BAAA;AAAA,QACT,IADS,EAET,IAFS,EAGT,I,oCAHS,EAaJ,CAbI;AAAA;AAAA;AAAA;AAAA;AACT,gBADS,GACF,EADE;AAAA;AAAA,mBAEI,SAFJ;;AAAA;AAET,gBAFS;AAGT,gBAHS,GAG6B,KAAK,GAAL,CAAS,eAAK;AACtD,qBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAS,MAAT,EAAkB;AACnC,oCAAK,eAAK,IAAL,CAAU,GAAV,EAAe,QAAf,CAAL,EAA+B,UAAC,GAAD,EAAM,K,oBAAN,EAA6B;AAC1D,sBAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;AACT,0BAAQ,MAAM,GAAN,CAAU,aAAG;AACnB,2BAAO,eAAK,QAAL,CAAc,GAAd,EAAmB,EAAE,OAAF,CAAU,MAAV,EAAkB,EAAlB,CAAnB,CAAP;AACD,mBAFO,CAAR;AAGD,iBALD;AAMD,eAPM,CAAP;AAQD,aATyC,CAH7B;AAaJ,aAbI,GAaF,CAbE;;AAAA;AAAA,kBAaA,IAAE,KAAK,MAbP;AAAA;AAAA;AAAA;;AAAA,2BAcJ,IAdI;AAAA;AAAA,mBAcc,KAAK,CAAL,CAdd;;AAAA;AAAA;AAcX,gBAdW,gBAcC,MAdD;;AAAA;AAac,eAbd;AAAA;AAAA;;AAAA;AAAA,8CAgBN,IAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAe,Q;;;;SAAA,Q","file":"package-lister.js","sourcesContent":["/*@flow*/\nimport \"babel-polyfill\";\nimport { exec } from \"child_process\";\nimport path from \"path\";\nimport glob from \"glob\";\n\nfunction run(command: string, options?: Object): Promise<string> {\n  return new Promise((resolve,reject)=>{\n    exec(command, options, (err,sout,serr)=>{\n      if (err) return reject(serr);\n      resolve(sout.toString());\n    });\n  });\n}\n\nfunction parseEnv(data: string): {[key:string]: string} {\n  var parts = data.trim().split(\"\\n\");\n  var result = {};\n  parts.forEach(part=>{\n    var keys = part.split(\"=\");\n    result[keys[0]] = JSON.parse(keys.slice(1).join(\"=\"));\n  });\n  return result;\n}\n\nasync function pkgDirs(): Promise<Array<string>> {\n  var env = parseEnv(await run(\"go env\"));\n  return [\n    path.resolve(atom.config.get(\"go-quick-import.GOROOT\")||env.GOROOT, \"pkg\", env.GOOS + \"_\" + env.GOARCH),\n    path.resolve(atom.config.get(\"go-quick-import.GOPATH\")||env.GOPATH, \"pkg\", env.GOOS + \"_\" + env.GOARCH),\n  ]\n}\n\nexport default async function listPkgs(): Promise<Array<string>> {\n  var pkgs = [];\n  var dirs = await pkgDirs();\n  var wait: Array<Promise<Array<string>>> = dirs.map(dir=>{\n    return new Promise((resolve,reject)=>{\n      glob(path.join(dir, \"**/*.a\"), (err, paths: Array<string>)=>{\n        if (err) return reject(err);\n        resolve(paths.map(p=>{\n          return path.relative(dir, p.replace(/\\.a$/, \"\"));\n        }));\n      });\n    })\n  });\n  for (var i=0;i<wait.length;i++){\n    pkgs = pkgs.concat(await wait[i]);\n  }\n  return pkgs;\n}\n"]}