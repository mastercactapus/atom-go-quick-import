{"version":3,"sources":["../src/go-quick-import-view.js"],"names":["pathAliases","vals","atom","config","get","paths","forEach","parts","val","split","length","GoQuickImportView","addClass","modalPanel","workspace","addModalPanel","item","visible","setMaxItems","packageLister","kill","destroy","doList","importList","getActiveTextEditor","getText","imports","reduce","res","Path","existing","available","push","pkg","items","map","Remove","Label","Name","concat","setItems","focusFilterEditor","updateItems","show","hide","views","getView","focus","editor","origSource","newHeader","headerLen","oldHeader","slice","rows","setTextInBufferRange","editorEl"],"mappings":"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","file":"go-quick-import-view.js","sourcesContent":["/*@flow*/\nimport \"babel-polyfill\";\nimport { SelectListView } from \"atom-space-pen-views\";\nimport listPackages from \"./package-lister\";\nimport { AddImport, RemoveImport, ListImports } from \"./modimport\";\nimport { partition, indexBy } from \"lodash\";\n\nfunction pathAliases(): Object {\n  var vals: Array<string> = atom.config.get(\"go-quick-import.importNames\")\n  var paths = {};\n  vals.forEach(val=>{\n    var parts = val.split(\" \");\n    if (parts.length !== 2) return;\n    paths[parts[1]] = parts[0];\n  });\n  return paths;\n}\n\nexport default class GoQuickImportView extends SelectListView {\n  constructor() {\n    super()\n    this.addClass(\"overlay from-top\")\n    this.modalPanel = atom.workspace.addModalPanel({item:this, visible: false});\n    this.visible = false;\n    this.setMaxItems(100);\n  }\n  destroy() {\n    this.packageLister.kill();\n    this.modalPanel.destroy();\n    super.destroy();\n  }\n\n  async updateItems(): Promise {\n    if (!this.visible) return;\n    var doList = listPackages();\n    var importList = ListImports(atom.workspace.getActiveTextEditor().getText());\n\n    var imports = importList.reduce((res,item)=>{ res[item.Path] = item; return res }, {});\n    var existing = [];\n    var available = [];\n    (await doList).forEach(item=>{ if (imports[item]) existing.push(item); else available.push(item) })\n    var parts = partition(await doList, pkg=>imports[pkg]);\n    var items = existing.map(pkg=>({Remove: true, Path: pkg, Label: `delete: ${imports[pkg].Name} ( ${pkg} )`}));\n    items = items.concat(available.map(pkg=>({Path: pkg, Label: `${pkg}`})));\n    this.setItems(items);\n    this.focusFilterEditor();\n  }\n  async show(): Promise {\n    this.visible = true;\n    await this.updateItems();\n    if (!this.visible) return;\n    this.modalPanel.show();\n    this.focusFilterEditor();\n  }\n  hide() {\n    this.visible = false;\n    this.modalPanel.hide();\n  }\n  getFilterKey(): string {\n    return \"Label\";\n  }\n  viewForItem(item: Object): string {\n    return item.Remove\n      ? `<li class=\"go-quick-import remove\">${item.Label}</li>`\n      : `<li class=\"go-quick-import\">${item.Label}</li>`;\n  }\n  cancelled() {\n    this.hide();\n    atom.views.getView(atom.workspace.getActiveTextEditor()).focus();\n  }\n  confirmed(item: Object) {\n    var editor = atom.workspace.getActiveTextEditor();\n    var origSource: string = editor.getText();\n    var res;\n    if (item.Remove) {\n      res = RemoveImport(origSource, item.Path);\n    } else {\n      res = AddImport(origSource, item.Path, pathAliases()[item.Path] || \"\");\n    }\n    var newHeader = res[0];\n    var headerLen = res[1];\n\n    var oldHeader = origSource.slice(0, headerLen)\n    var rows = oldHeader.split(\"\\n\").length-1;\n\n    editor.setTextInBufferRange([[0,0], [rows, 0]], newHeader);\n    var editorEl = atom.views.getView(editor);\n    this.hide();\n    editorEl.focus();\n  }\n}\n"]}